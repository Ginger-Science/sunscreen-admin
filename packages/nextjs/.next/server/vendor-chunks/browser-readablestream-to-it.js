"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/browser-readablestream-to-it";
exports.ids = ["vendor-chunks/browser-readablestream-to-it"];
exports.modules = {

/***/ "(rsc)/../../node_modules/browser-readablestream-to-it/dist/src/index.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/browser-readablestream-to-it/dist/src/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ browserReadableStreamToIt)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nasync function* browserReadableStreamToIt(stream, options = {}) {\n    const reader = stream.getReader();\n    try {\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                return;\n            }\n            yield result.value;\n        }\n    }\n    finally {\n        if (options.preventCancel !== true) {\n            await reader.cancel();\n        }\n        reader.releaseLock();\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVhZGFibGVzdHJlYW0tdG8taXQvZGlzdC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHFCQUFxQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHFCQUFxQjtBQUM5RDtBQUNBO0FBQ2UsOERBQThEO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uLi8uLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZWFkYWJsZXN0cmVhbS10by1pdC9kaXN0L3NyYy9pbmRleC5qcz9hMTE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKlxuICogQWxsb3dzIHRyZWF0aW5nIGEgYnJvd3NlciByZWFkYWJsZSBzdHJlYW0gYXMgYW4gYXN5bmMgaXRlcmF0b3IuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgdG9JdCBmcm9tICdicm93c2VyLXJlYWRhYmxlc3RyZWFtLXRvLWl0J1xuICogaW1wb3J0IGFsbCBmcm9tICdpdC1hbGwnXG4gKlxuICogY29uc3QgY29udGVudCA9IFswLCAxLCAyLCAzLCA0XVxuICpcbiAqIGNvbnN0IHN0cmVhbSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gKiAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAqICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspIHtcbiAqICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShjb250ZW50W2ldKVxuICogICAgIH1cbiAqXG4gKiAgICAgY29udHJvbGxlci5jbG9zZSgpXG4gKiAgIH1cbiAqIH0pXG4gKlxuICogY29uc3QgYXJyID0gYXdhaXQgYWxsKHRvSXQoc3RyZWFtKSlcbiAqXG4gKiBjb25zb2xlLmluZm8oYXJyKSAvLyAwLCAxLCAyLCAzLCA0XG4gKiBgYGBcbiAqXG4gKiAjIyBwcmV2ZW50Q2FuY2VsXG4gKlxuICogQnkgZGVmYXVsdCBhIHJlYWRhYmxlIHN0cmVhbSB3aWxsIGhhdmUgWy5jYW5jZWxdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9SZWFkYWJsZVN0cmVhbS9jYW5jZWwpIGNhbGxlZCBvbiBpdCBvbmNlIGl0IGhhcyBlbmRlZCBvclxuICogcmVhZGluZyBoYXMgc3RvcHBlZCBwcmVtYXR1cmVseS5cbiAqXG4gKiBUbyBwcmV2ZW50IHRoaXMgYmVoYXZpb3VyLCBwYXNzIGBwcmV2ZW50Q2FuY2VsOiB0cnVlYCBhcyBhbiBvcHRpb246XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgYXJyID0gYXdhaXQgYWxsKHRvSXQoc3RyZWFtLCB7IHByZXZlbnRDYW5jZWw6IHRydWUgfSkpXG4gKlxuICogY29uc29sZS5pbmZvKGFycikgLy8gMCwgMSwgMiwgMywgNFxuICogYGBgXG4gKi9cbi8qKlxuICogVHVybnMgYSBicm93c2VyIHJlYWRhYmxlIHN0cmVhbSBpbnRvIGFuIGFzeW5jIGl0ZXJhYmxlLiBBc3luYyBpdGVyYXRpb24gb3ZlclxuICogcmV0dXJuZWQgaXRlcmFibGUgd2lsbCBsb2NrIGdpdmUgc3RyZWFtLCBwcmV2ZW50aW5nIGFueSBvdGhlciBjb25zdW1lciBmcm9tXG4gKiBhY3F1aXJpbmcgYSByZWFkZXIuIFRoZSBsb2NrIHdpbGwgYmUgcmVsZWFzZWQgaWYgaXRlcmF0aW9uIGxvb3AgaXMgYnJva2VuLiBUb1xuICogcHJldmVudCBzdHJlYW0gY2FuY2VsbGluZyBvcHRpb25hbCBgeyBwcmV2ZW50Q2FuY2VsOiB0cnVlIH1gIGNvdWxkIGJlIHBhc3NlZFxuICogYXMgYSBzZWNvbmQgYXJndW1lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uKiBicm93c2VyUmVhZGFibGVTdHJlYW1Ub0l0KHN0cmVhbSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQgcmVzdWx0LnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpZiAob3B0aW9ucy5wcmV2ZW50Q2FuY2VsICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBhd2FpdCByZWFkZXIuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/browser-readablestream-to-it/dist/src/index.js\n");

/***/ })

};
;